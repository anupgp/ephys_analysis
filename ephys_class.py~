from neo import AxonIO
import numpy as np
from matplotlib import pyplot as plt
from numba import jit

class ephys:
    
    def __init__(self,fname,loaddata=True):
        self.fname = fname
        self.loaddata = loaddata
        self.reader = AxonIO(filename=self.fname)
        self.nblocks = self.reader.block_count()
        self.nsweeps = np.zeros(self.nblocks,dtype=np.int)
        self.si = self.reader.get_signal_sampling_rate()
        self.samplesize = self.reader.get_signal_size(block_index=0,seg_index=0)
        self.tstart = self.reader.segment_t_start(block_index=0,seg_index=0)
        self.tstop = self.reader.segment_t_stop(block_index=0,seg_index=0)
        self.header = self.reader.header
        
        # get number of sweeps in each block
        for i in np.arange(0,self.nblocks):
            self.nsweeps[i] = self.reader.segment_count(i)
        if(len(self.nsweeps)==1):
            self.nsweeps = self.nsweeps[0]
        self.nchannels = self.reader.signal_channels_count()
        # extract channel/signal propertied for each signal/channel from header
        
        # get number of samples from the first block, first segment
        self.nsamples = self.reader.get_signal_size(block_index=0,seg_index=0)
        if(self.loaddata):
            self.data=self.__loaddata()
        # extract date/time of the file
        # self.date 
    def show(self,isweeps=[],ichannels=[]):
        """Display traces"""
        if (len(isweeps) == 0):
            isweeps = np.arange(0,self.nsweeps)
        if (len(ichannels) == 0):
            ichannels = np.arange(0,self.nchannels)
        fig = plt.figure()
        pannelcount=0
        # load data of not already loaded
        if(~self.loaddata):
            self.data = self.__loaddata()
            t = np.arange(self.tstart,self.tstop,1/self.si)
            ax = []
            ax.append(fig.add_subplot(len(ichannels),1,1))
        for i in ichannels:
            pannelcount = pannelcount + 1
            if(pannelcount>1):
                ax.append(fig.add_subplot(len(ichannels),1,pannelcount,sharex=ax[0]))
            for j in isweeps:
                ax[pannelcount-1].plot(t,self.data[j,i,:])
        print(self.data.shape)
        plt.show()
            
    
    def __loaddata(self):
        """loads all the sweeps and channels into a numpy ndarray: timeseries * sweeps * channels """
        self.data= np.zeros((self.nsweeps,self.nchannels,self.nsamples))
            # blk = self.reader.read_block(block_index=i,lazy=False,signal_group_mode='split-all',units_group_mode='split-all')
        blk = self.reader.read_block(lazy=False)
        iseg = -1
        for seg in blk.segments:
            iseg = iseg + 1
            isig = -1
            for i, asig in enumerate(seg.analogsignals):
                isig = isig + 1
                asig = asig.magnitude
                print(asig)
                print(asig.shape)
                self.data[iseg,isig,:] = asig[:,0]                
        print('Data reading completed.')
        return(self.data)
            
    def info(self):
        print('fname:','\t',self.fname)
        print('nblocks:','\t',self.nblocks)
        print('nsweeps:','\t',self.nsweeps)
        print('nchannels','\t',self.nchannels)
        print('sampling interval:','\t',self.si)
        print('t_start','\t',self.tstart)
        print('t_stop','\t',self.tstop)
        print('sample size:','\t',self.samplesize)
        
    def __del__(self):
        print("Object has been deleted")
        pass


# fname = "/Volumes/Anup_2TB/raw_data/beiquelab/zeiss880/data_anup/20190627/C3/2019_06_27_0152.abf"
fname = "/Volumes/Anup_2TB/raw_data/beiquelab/o2p/ephys/20200213/C1/20213005.abf"
ephys1 = ephys(fname,loaddata=True)
ephys1.info()
ephys1.show()
